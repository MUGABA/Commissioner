{"version":3,"file":"static/js/7884.5f3c22e5.chunk.js","mappings":"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","sources":["app/views/sessions/JwtRegister.jsx"],"sourcesContent":["import { useTheme } from '@emotion/react';\nimport { LoadingButton } from '@mui/lab';\nimport { Card, Grid, TextField } from '@mui/material';\nimport { Box, styled } from '@mui/system';\nimport { Paragraph } from 'app/components/Typography';\nimport useAuth from 'app/hooks/useAuth';\nimport { Formik } from 'formik';\nimport { useState } from 'react';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\n\nconst FlexBox = styled(Box)(() => ({ display: 'flex', alignItems: 'center' }));\n\nconst JustifyBox = styled(FlexBox)(() => ({ justifyContent: 'center' }));\n\n// const ContentBox = styled(JustifyBox)(() => ({\n//   height: '100%',\n//   padding: '32px',\n//   background: 'rgba(0, 0, 0, 0.01)',\n// }));\n\nconst JWTRegister = styled(JustifyBox)(() => ({\n  background: '#1A2038',\n  minHeight: '100vh !important',\n  '& .card': {\n    maxWidth: 800,\n    minHeight: 400,\n    margin: '1rem',\n    display: 'flex',\n    borderRadius: 12,\n    alignItems: 'center',\n  },\n}));\n\n// inital login credentials\nconst initialValues = {\n  email: '',\n  password: '',\n  fullName: '',\n  userSide: 'Patient',\n};\n\n// form field validation schema\nconst validationSchema = Yup.object().shape({\n  fullName: Yup.string().required('Full name id required'),\n  userSide: Yup.string().nullable(),\n  password: Yup.string()\n    .min(6, 'Password must be 6 character length')\n    .required('Password is required!'),\n  email: Yup.string().email('Invalid Email address').required('Email is required!'),\n});\n\nconst JwtRegister = () => {\n  const theme = useTheme();\n  const { register } = useAuth();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n\n  const handleFormSubmit = (values) => {\n    setLoading(true);\n\n    try {\n      register(values.email, values.fullName, values.password, values.userSide);\n      navigate('/dashboard/patient-details');\n      setLoading(false);\n    } catch (e) {\n      console.log(e);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <JWTRegister>\n      <Card className=\"card\">\n        <Grid container>\n          <Grid item sm={12} xs={12}>\n            <Box p={4} height=\"100%\">\n              <Formik\n                onSubmit={handleFormSubmit}\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n              >\n                {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\n                  <form onSubmit={handleSubmit}>\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      type=\"text\"\n                      name=\"fullName\"\n                      label=\"Full Name\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.fullName}\n                      onChange={handleChange}\n                      helperText={touched.fullName && errors.fullName}\n                      error={Boolean(errors.fullName && touched.fullName)}\n                      sx={{ mb: 3 }}\n                    />\n\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      type=\"email\"\n                      name=\"email\"\n                      label=\"Email\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.email}\n                      onChange={handleChange}\n                      helperText={touched.email && errors.email}\n                      error={Boolean(errors.email && touched.email)}\n                      sx={{ mb: 3 }}\n                    />\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      name=\"password\"\n                      type=\"password\"\n                      label=\"Password\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.password}\n                      onChange={handleChange}\n                      helperText={touched.password && errors.password}\n                      error={Boolean(errors.password && touched.password)}\n                      sx={{ mb: 2 }}\n                    />\n\n                    <LoadingButton\n                      type=\"submit\"\n                      color=\"primary\"\n                      loading={loading}\n                      variant=\"contained\"\n                      sx={{ mb: 2, mt: 3 }}\n                    >\n                      Regiser\n                    </LoadingButton>\n\n                    <Paragraph>\n                      Already have an account?\n                      <NavLink\n                        to=\"/session/signin\"\n                        style={{ color: theme.palette.primary.main, marginLeft: 5 }}\n                      >\n                        Login\n                      </NavLink>\n                    </Paragraph>\n                  </form>\n                )}\n              </Formik>\n            </Box>\n          </Grid>\n        </Grid>\n      </Card>\n    </JWTRegister>\n  );\n};\n\nexport default JwtRegister;\n"],"names":["FlexBox","styled","Box","display","alignItems","JustifyBox","justifyContent","JWTRegister","background","minHeight","maxWidth","margin","borderRadius","initialValues","email","password","fullName","userSide","validationSchema","Yup","shape","required","nullable","min","theme","useTheme","register","useAuth","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_jsx","children","Card","className","Grid","container","item","sm","xs","p","height","Formik","onSubmit","values","e","console","log","_ref","errors","touched","handleChange","handleBlur","handleSubmit","_jsxs","TextField","fullWidth","size","type","name","label","variant","onBlur","value","onChange","helperText","error","Boolean","sx","mb","LoadingButton","color","mt","Paragraph","NavLink","to","style","palette","primary","main","marginLeft"],"sourceRoot":""}