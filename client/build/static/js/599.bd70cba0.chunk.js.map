{"version":3,"file":"static/js/599.bd70cba0.chunk.js","mappings":"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","sources":["app/views/sessions/RegisterDoc.jsx"],"sourcesContent":["import { useTheme } from '@emotion/react';\nimport { LoadingButton } from '@mui/lab';\nimport { Box, Card, Grid, TextField } from '@mui/material';\nimport { styled } from '@mui/system';\nimport axios from 'axios.js';\nimport url from 'connectionString';\nimport { Formik } from 'formik';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\n\nconst FlexBox = styled(Box)(() => ({ display: 'flex', alignItems: 'center' }));\n\nconst JustifyBox = styled(FlexBox)(() => ({ justifyContent: 'center' }));\n\n// const ContentBox = styled(JustifyBox)(() => ({\n//   height: '100%',\n//   padding: '32px',\n//   background: 'rgba(0, 0, 0, 0.01)',\n// }));\n\nexport const Container = styled(JustifyBox)(() => ({\n  width: '90vw',\n  '& .card': {\n    width: '80vw',\n    margin: '1rem',\n    borderRadius: 12,\n  },\n  borderColor: '#1A2038',\n}));\n\nconst initialValues = {\n  email: '',\n  password: '',\n  fullName: '',\n  userSide: 'Admin',\n  levelOfEducation: '',\n};\n\nconst validationSchema = Yup.object().shape({\n  fullName: Yup.string().required('Full name id required'),\n  userSide: Yup.string().nullable(),\n  password: Yup.string()\n    .min(6, 'Password must be 6 character length')\n    .required('Password is required!'),\n  email: Yup.string().email('Invalid Email address').required('Email is required!'),\n  levelOfEducation: Yup.string().required(\"PLease enter leader's level of education\"),\n});\n\nconst registerDoc = async (data) => {\n  const user = await axios.post(`${url.url}/auth/patient-doc`, data);\n\n  return user;\n};\n\nconst RegisterDoc = () => {\n  const theme = useTheme();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n\n  const handleFormSubmit = async (values) => {\n    setLoading(true);\n\n    try {\n      await registerDoc(values);\n      navigate('/dashboard/view-users');\n      setLoading(false);\n    } catch (e) {\n      console.log(e);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Container>\n      <Card className=\"card\">\n        <Grid container>\n          <Grid item sm={12} xs={12}>\n            <Box p={4} height=\"100%\">\n              <Formik\n                onSubmit={handleFormSubmit}\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n              >\n                {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\n                  <form onSubmit={handleSubmit}>\n                    <Grid container spacing={6}>\n                      <Grid item xs={12} lg={6}>\n                        <TextField\n                          fullWidth\n                          size=\"small\"\n                          type=\"text\"\n                          name=\"fullName\"\n                          label=\"Full Name\"\n                          variant=\"outlined\"\n                          onBlur={handleBlur}\n                          value={values.fullName}\n                          onChange={handleChange}\n                          helperText={touched.fullName && errors.fullName}\n                          error={Boolean(errors.fullName && touched.fullName)}\n                          sx={{ mb: 3 }}\n                        />\n                      </Grid>\n\n                      <Grid item xs={12} lg={6}>\n                        <TextField\n                          fullWidth\n                          size=\"small\"\n                          type=\"email\"\n                          name=\"email\"\n                          label=\"Email\"\n                          variant=\"outlined\"\n                          onBlur={handleBlur}\n                          value={values.email}\n                          onChange={handleChange}\n                          helperText={touched.email && errors.email}\n                          error={Boolean(errors.email && touched.email)}\n                          sx={{ mb: 3 }}\n                        />\n                      </Grid>\n                    </Grid>\n\n                    <Grid container spacing={6}>\n                      <Grid item xs={12} lg={6}>\n                        <TextField\n                          fullWidth\n                          size=\"small\"\n                          type=\"text\"\n                          name=\"levelOfEducation\"\n                          label=\"level of education\"\n                          variant=\"outlined\"\n                          onBlur={handleBlur}\n                          value={values.levelOfEducation}\n                          onChange={handleChange}\n                          helperText={touched.levelOfEducation && errors.levelOfEducation}\n                          error={Boolean(errors.levelOfEducation && touched.levelOfEducation)}\n                          sx={{ mb: 3 }}\n                        />\n                      </Grid>\n                      <Grid item xs={12} lg={6}>\n                        <TextField\n                          fullWidth\n                          size=\"small\"\n                          name=\"password\"\n                          type=\"password\"\n                          label=\"Password\"\n                          variant=\"outlined\"\n                          onBlur={handleBlur}\n                          value={values.password}\n                          onChange={handleChange}\n                          helperText={touched.password && errors.password}\n                          error={Boolean(errors.password && touched.password)}\n                          sx={{ mb: 2 }}\n                        />\n                      </Grid>\n                    </Grid>\n\n                    <LoadingButton\n                      type=\"submit\"\n                      color=\"primary\"\n                      loading={loading}\n                      variant=\"contained\"\n                      sx={{ mb: 2, mt: 3 }}\n                    >\n                      Register Doctor\n                    </LoadingButton>\n                  </form>\n                )}\n              </Formik>\n            </Box>\n          </Grid>\n        </Grid>\n      </Card>\n    </Container>\n  );\n};\n\nexport default RegisterDoc;\n"],"names":["FlexBox","styled","Box","display","alignItems","JustifyBox","justifyContent","Container","width","margin","borderRadius","borderColor","initialValues","email","password","fullName","userSide","levelOfEducation","validationSchema","Yup","shape","required","nullable","min","registerDoc","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","user","wrap","_context","prev","next","axios","concat","url","sent","abrupt","stop","_x","apply","arguments","useTheme","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","loading","setLoading","handleFormSubmit","_ref2","_callee2","values","_context2","t0","console","log","_x2","_jsx","children","Card","className","Grid","container","item","sm","xs","p","height","Formik","onSubmit","_ref3","errors","touched","handleChange","handleBlur","handleSubmit","_jsxs","spacing","lg","TextField","fullWidth","size","type","name","label","variant","onBlur","value","onChange","helperText","error","Boolean","sx","mb","LoadingButton","color","mt"],"sourceRoot":""}